package org.vdragun.tms.util.initializer;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.vdragun.tms.core.domain.Category;
import org.vdragun.tms.core.domain.Classroom;
import org.vdragun.tms.core.domain.Course;
import org.vdragun.tms.core.domain.Group;
import org.vdragun.tms.core.domain.Student;
import org.vdragun.tms.core.domain.Teacher;
import org.vdragun.tms.core.domain.Timetable;
import org.vdragun.tms.dao.CategoryDao;
import org.vdragun.tms.dao.ClassroomDao;
import org.vdragun.tms.dao.CourseDao;
import org.vdragun.tms.dao.GroupDao;
import org.vdragun.tms.dao.StudentDao;
import org.vdragun.tms.dao.TeacherDao;
import org.vdragun.tms.dao.TimetableDao;
import org.vdragun.tms.util.generator.CategoryParser;
import org.vdragun.tms.util.generator.ClassroomGenerator;
import org.vdragun.tms.util.generator.CourseGenerator;
import org.vdragun.tms.util.generator.CourseGenerator.CourseGeneratorData;
import org.vdragun.tms.util.generator.GroupGenerator;
import org.vdragun.tms.util.generator.PersonGenerator.PersonGeneratorData;
import org.vdragun.tms.util.generator.StudentGenerator;
import org.vdragun.tms.util.generator.StudentsToCoursesRandomDistributor;
import org.vdragun.tms.util.generator.StudentsToGroupRandomDistributor;
import org.vdragun.tms.util.generator.TeacherGenerator;
import org.vdragun.tms.util.generator.TimetableGenerator;

/**
 * Component responsible for populating database with initial data
 * 
 * @author Vitaliy Dragun
 *
 */
@Component
@Transactional
@ConditionalOnProperty(
        name = "startup.data.initialize",
        havingValue = "true",
        matchIfMissing = true)
public class InitialDataDatabasePopulatorImpl implements InitialDataDatabasePopulator {
    
    private static final Logger LOG = LoggerFactory.getLogger(InitialDataDatabasePopulatorImpl.class);

    private GeneratorProperties generatorProps;

    private ClassroomDao classroomDao;

    private CategoryDao categoryDao;

    private GroupDao groupDao;

    private TeacherDao teacherDao;

    private StudentDao studentDao;

    private CourseDao courseDao;

    private TimetableDao timetableDao;

    public InitialDataDatabasePopulatorImpl(
            GeneratorProperties generatorProps,
            ClassroomDao classroomDao,
            CategoryDao categoryDao,
            GroupDao groupDao,
            TeacherDao teacherDao,
            StudentDao studentDao,
            CourseDao courseDao,
            TimetableDao timetableDao) {
        this.generatorProps = generatorProps;
        this.classroomDao = classroomDao;
        this.categoryDao = categoryDao;
        this.groupDao = groupDao;
        this.teacherDao = teacherDao;
        this.studentDao = studentDao;
        this.courseDao = courseDao;
        this.timetableDao = timetableDao;
    }


    @Override
    public void populateDatabaseWithInitialData() {
        LOG.info("Populating database with init data");

        populateDatabaseWithGeneratedData();
    }


    private void populateDatabaseWithGeneratedData() {
        LOG.info("Populating database with autogenerated data");

        CategoryParser categoryParser = new CategoryParser();
        GroupGenerator groupGenerator = new GroupGenerator();
        ClassroomGenerator classroomGenerator = new ClassroomGenerator();
        StudentGenerator studentGenerator = new StudentGenerator();
        TeacherGenerator teacherGenerator = new TeacherGenerator();
        CourseGenerator courseGenerator = new CourseGenerator();
        TimetableGenerator timetableGenerator = new TimetableGenerator(
                generatorProps.getTimetableStartTime(),
                generatorProps.getTimetableEndTime(),
                generatorProps.getTimetableDurationInMinutes(),
                generatorProps.getTimetablePeriodOfMonths(),
                generatorProps.getTimetableMaxClassesPerWeek());
        StudentsToGroupRandomDistributor groupRandomDistributor = new StudentsToGroupRandomDistributor();
        StudentsToCoursesRandomDistributor coursesRandomDistributor = new StudentsToCoursesRandomDistributor();

        List<Category> categories = categoryParser.parse(generatorProps.getCategories());
        categoryDao.saveAll(categories);

        List<Group> groups = groupGenerator.generate(generatorProps.getNumberOfGroups());
        groupDao.saveAll(groups);

        List<Classroom> classrooms = classroomGenerator.generate(
                generatorProps.getNumberOfClassrooms(),
                generatorProps.getClassroomMinCapacity(),
                generatorProps.getClassroomMaxCapacity());
        classrooms.forEach(classroom -> classroomDao.save(classroom));

        List<Student> students = studentGenerator
                .generate(PersonGeneratorData.from(
                        generatorProps.getNumberOfStudents(),
                        generatorProps.getFirstNames(),
                        generatorProps.getLastNames(),
                        generatorProps.getBaseDate(),
                        generatorProps.getDeviationDays()));
        studentDao.saveAll(students);

        List<Teacher> teachers = teacherGenerator
                .generate(PersonGeneratorData.from(
                        generatorProps.getNumberOfTeachers(),
                        generatorProps.getFirstNames(),
                        generatorProps.getLastNames(),
                        generatorProps.getBaseDate(),
                        generatorProps.getDeviationDays()));
        teacherDao.saveAll(teachers);

        List<Course> courses = courseGenerator
                .generate(CourseGeneratorData.from(
                        generatorProps.getNumberOfCourses(),
                        generatorProps.getCoursePrefixes(),
                        categories,
                        teachers));
        courseDao.saveAll(courses);

        List<Timetable> timetables = timetableGenerator.generate(courses, classrooms);
        timetableDao.saveAll(timetables);

        groupRandomDistributor.assignStudentsToGroups(
                students,
                groups,
                generatorProps.getMinStudentsPerGroup(),
                generatorProps.getMaxStudentsPerGroup());
        persistStudentsWithGroupsInDatabase(students);

        coursesRandomDistributor.assignStudentsToCourses(
                students,
                courses,
                generatorProps.getMaxCoursesPerStudent());
        persistStudentWithCoursesInDatabase(students);
    }

    private void persistStudentWithCoursesInDatabase(List<Student> students) {
        students.stream()
                .filter(student -> !student.getCourses().isEmpty())
                .forEach(student -> student.getCourses()
                        .forEach(course -> studentDao.addToCourse(student.getId(), course.getId())));
    }

    private void persistStudentsWithGroupsInDatabase(List<Student> students) {
        students.stream()
                .filter(student -> student.getGroup() != null)
                .forEach(student -> studentDao.addToGroup(student.getId(), student.getGroup().getId()));
    }

}
